var searchIndex = {};
searchIndex['basichll'] = {"items":[[0,"","basichll","",null,null],[3,"HLL","","The `HLL` struct stores the underlying registers\nof the HyperLogLog, with `m` many registers.",null,null],[11,"one_hundred_twenty_eight","","Convenience function to produce a HLL with\none hundred and twenty eight registers.",0,{"inputs":[{"name":"hll"}],"output":{"name":"hll"}}],[11,"new","","Create a new HLL with the desired standard error.\nSome examples might be:",0,{"inputs":[{"name":"hll"},{"name":"f64"}],"output":{"name":"hll"}}],[11,"insert","","Add an element into the hyperloglog estimate.\nWe require the type of value to be able to be hashed.",0,{"inputs":[{"name":"hll"},{"name":"t"}],"output":null}],[11,"count","","Return the estimated cardinality of the observed set\nof elements.",0,{"inputs":[{"name":"hll"}],"output":{"name":"f64"}}],[11,"registers","","Access a copy of the underlying registers (this is mainly\nhere just for debugging/testing... its unlikely you'll need\nthis access typically).",0,{"inputs":[{"name":"hll"}],"output":{"name":"vec"}}],[11,"clone","","Copies this instance into a new HLL.\nDoesn't do anything tricky (i.e. this will entirely\nre-allocate the underlying registers).",0,{"inputs":[{"name":"hll"}],"output":{"name":"hll"}}],[11,"empty","","A completely zeroed HLL. Not particularly useful\nexcept as an identity element in `Add`.",0,{"inputs":[{"name":"hll"}],"output":{"name":"hll"}}],[11,"fmt","","",0,{"inputs":[{"name":"hll"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"hll"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"hll"},{"name":"hll"}],"output":{"name":"bool"}}],[6,"Output","","",null,null]],"paths":[[3,"HLL"]]};
initSearch(searchIndex);
